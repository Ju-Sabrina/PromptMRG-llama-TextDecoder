#!/usr/bin/env python

import os
import sys
import subprocess
import threading

METEOR_JAR = 'meteor-1.5.jar'

class Meteor:

    def __init__(self):
        self.meteor_cmd = ['java', '-jar', '-Xmx2G', METEOR_JAR,
                           '-', '-', '-stdio', '-l', 'en', '-norm']
        self.meteor_p = subprocess.Popen(self.meteor_cmd,
                                         cwd=os.path.dirname(os.path.abspath(__file__)),
                                         stdin=subprocess.PIPE,
                                         stdout=subprocess.PIPE,
                                         stderr=subprocess.PIPE,
                                         universal_newlines=True,
                                         bufsize=1)
        self.lock = threading.Lock()

    def compute_score(self, gts, res):
        assert gts.keys() == res.keys()
        imgIds = gts.keys()
        scores = []

        self.lock.acquire()
        valid_count = 0
        try:
            for i in imgIds:
                try:
                    assert len(res[i]) == 1
                    hypothesis_str = res[i][0].replace('|||', '').replace('  ', ' ')
                    references = [r.replace('|||', '').replace('  ', ' ') for r in gts[i]]
                    score_line = ' ||| '.join(('SCORE', ' ||| '.join(references), hypothesis_str))
                    self.meteor_p.stdin.write(f'{score_line}\n')
                    self.meteor_p.stdin.flush()
                    stats = self.meteor_p.stdout.readline().strip()

                    eval_line = f'EVAL ||| {stats}'
                    self.meteor_p.stdin.write(f'{eval_line}\n')
                    self.meteor_p.stdin.flush()

                    line = self.meteor_p.stdout.readline().strip()
                    try:
                        score = float(line)
                    except ValueError:
                        print(f"[Warning] Failed to parse METEOR output: '{line}'")
                        score = 0.0

                    scores.append(score)
                    valid_count += 1

                except Exception as e:
                    print(f"\n[METEOR-SAFE] Skipping sample '{i}' due to error: {e}")
                    try:
                        hyp_preview = res[i][0][:120] + ('...' if len(res[i][0]) > 120 else '')
                        refs_preview = [r[:120] + ('...' if len(r) > 120 else '') for r in gts[i]]
                        print(f"  ❌ Hypothesis: {hyp_preview}")
                        for idx, ref in enumerate(refs_preview):
                            print(f"  ❌ Reference[{idx}]: {ref}")
                    except Exception as inner_e:
                        print(f"  ⚠️ Failed to print content for sample '{i}': {inner_e}")
                    scores.append(0.0)

            # 读取总平均得分
            try:
                final_line = self.meteor_p.stdout.readline().strip()
                final_score = float(final_line)
            except Exception:
                print(f"[Warning] Failed to parse METEOR average score")
                final_score = sum(scores) / len(scores) if scores else 0.0

        finally:
            self.lock.release()

        return final_score, scores


    def method(self):
        return "METEOR"

    def _stat(self, hypothesis_str, reference_list):
        hypothesis_str = hypothesis_str.replace('|||', '').replace('  ', ' ')
        score_line = ' ||| '.join(('SCORE', ' ||| '.join(reference_list), hypothesis_str))
        self.meteor_p.stdin.write(f'{score_line}\n')
        return self.meteor_p.stdout.readline().strip()

    def _score(self, hypothesis_str, reference_list):
        self.lock.acquire()
        try:
            hypothesis_str = hypothesis_str.replace('|||', '').replace('  ', ' ')
            score_line = ' ||| '.join(('SCORE', ' ||| '.join(reference_list), hypothesis_str))
            self.meteor_p.stdin.write(f'{score_line}\n')
            stats = self.meteor_p.stdout.readline().strip()
            eval_line = f'EVAL ||| {stats}'
            self.meteor_p.stdin.write(f'{eval_line}\n')
            score = float(self.meteor_p.stdout.readline().strip())
            score = float(self.meteor_p.stdout.readline().strip())
        except Exception as e:
            print(f"[Warning] METEOR _score failed: {e}")
            score = 0.0
        finally:
            self.lock.release()
        return score

    def __del__(self):
        try:
            self.lock.acquire()
            if self.meteor_p:
                self.meteor_p.stdin.close()
                self.meteor_p.kill()
                self.meteor_p.wait()
        except Exception as e:
            print(f"[Warning] METEOR __del__ cleanup failed: {e}")
        finally:
            self.lock.release()
